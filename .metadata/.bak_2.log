!SESSION 2023-11-24 09:51:51.401 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.5
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=pt_BR
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

This is a continuation of log file D:\bruno tads0\.metadata\.bak_1.log
Created Time: 2023-11-24 13:18:28.110

!ENTRY org.eclipse.jdt.ui 4 0 2023-11-24 13:18:28.120
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:18:28.855
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
			String situacao;
			if(dinheiro1 > dinheiro2) {
				situacao = ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				situacao = ranking(dinheiro2, nomes[1]);
			}
			situ
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-11-24 13:18:28.870
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-11-24 13:18:28.876
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:18:30.748
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
			String situacao;
			if(dinheiro1 > dinheiro2) {
				situacao = ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				situacao = ranking(dinheiro2, nomes[1]);
			}
			situacao
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-11-24 13:18:30.774
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-11-24 13:18:30.779
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:18:31.601
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
			String situacao;
			if(dinheiro1 > dinheiro2) {
				situacao = ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				situacao = ranking(dinheiro2, nomes[1]);
			}
			situacao
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-11-24 13:18:31.619
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-11-24 13:18:31.670
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:18:33.097
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
			String situacao;
			if(dinheiro1 > dinheiro2) {
				situacao = ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				situacao = ranking(dinheiro2, nomes[1]);
			}
			situacao
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-11-24 13:18:33.121
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-11-24 13:18:33.127
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:18:39.065
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
			String situacao;
			if(dinheiro1 > dinheiro2) {
				situacao = ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				situacao = ranking(dinheiro2, nomes[1]);
			}
			
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-11-24 13:18:39.087
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-11-24 13:18:39.093
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:18:39.937
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
			String situacao;
			if(dinheiro1 > dinheiro2) {
				situacao = ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				situacao = ranking(dinheiro2, nomes[1]);
			}
			s
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-11-24 13:18:39.957
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-11-24 13:18:39.964
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:18:39.983
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
			String situacao;
			if(dinheiro1 > dinheiro2) {
				situacao = ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				situacao = ranking(dinheiro2, nomes[1]);
			}
			sy
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:18:40.003
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
			String situacao;
			if(dinheiro1 > dinheiro2) {
				situacao = ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				situacao = ranking(dinheiro2, nomes[1]);
			}
			sy
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-11-24 13:18:40.017
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.ui 4 2 2023-11-24 13:18:40.023
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-11-24 13:18:40.029
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.ui 4 0 2023-11-24 13:18:40.035
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:18:40.872
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
			String situacao;
			if(dinheiro1 > dinheiro2) {
				situacao = ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				situacao = ranking(dinheiro2, nomes[1]);
			}
			syso
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-11-24 13:18:40.891
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-11-24 13:18:40.896
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:18:41.704
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
			String situacao;
			if(dinheiro1 > dinheiro2) {
				situacao = ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				situacao = ranking(dinheiro2, nomes[1]);
			}
			syso
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-11-24 13:18:41.718
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-11-24 13:18:41.724
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:18:46.831
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
			String situacao;
			if(dinheiro1 > dinheiro2) {
				situacao = ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				situacao = ranking(dinheiro2, nomes[1]);
			}
			System.out.println();
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-11-24 13:18:46.853
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-11-24 13:18:46.872
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:18:52.898
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
			String situacao;
			if(dinheiro1 > dinheiro2) {
				situacao = ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				situacao = ranking(dinheiro2, nomes[1]);
			}
			System.out.println(situa);
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-11-24 13:18:52.921
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-11-24 13:18:52.927
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:18:54.141
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
			String situacao;
			if(dinheiro1 > dinheiro2) {
				situacao = ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				situacao = ranking(dinheiro2, nomes[1]);
			}
			System.out.println(situacao);
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-11-24 13:18:54.158
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-11-24 13:18:54.164
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:19:03.173
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
			String situacao;
			if(dinheiro1 > dinheiro2) {
				situacao = ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				situacao = ranking(dinheiro2, nomes[1]);
			}
			System.out.println(situacao);
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-11-24 13:19:03.197
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-11-24 13:19:03.203
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:19:04.649
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
			String situacao=;
			if(dinheiro1 > dinheiro2) {
				situacao = ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				situacao = ranking(dinheiro2, nomes[1]);
			}
			System.out.println(situacao);
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-11-24 13:19:04.662
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-11-24 13:19:04.680
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:19:05.642
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
			String situacao="";
			if(dinheiro1 > dinheiro2) {
				situacao = ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				situacao = ranking(dinheiro2, nomes[1]);
			}
			System.out.println(situacao);
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-11-24 13:19:05.656
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-11-24 13:19:05.662
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:19:06.580
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
			String situacao="";
			if(dinheiro1 > dinheiro2) {
				situacao = ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				situacao = ranking(dinheiro2, nomes[1]);
			}
			System.out.println(situacao);
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-11-24 13:19:06.598
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-11-24 13:19:06.604
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:19:07.778
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
			String situacao="";
			if(dinheiro1 > dinheiro2) {
				situacao = ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				situacao = ranking(dinheiro2, nomes[1]);
			}
			System.out.println(situacao);
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-11-24 13:19:07.798
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-11-24 13:19:07.804
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:19:09.538
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
			String situacao="";
			if(dinheiro1 > dinheiro2) {
				situacao = ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				situacao = ranking(dinheiro2, nomes[1]);
			}
			System.out.println(situacao);
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-11-24 13:19:09.557
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-11-24 13:19:09.563
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:19:10.687
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
			String situacao="";
			if(dinheiro1 > dinheiro2) {
				situacao = ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				situacao = ranking(dinheiro2, nomes[1]);
			}
			System.out.println(situacao);
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-11-24 13:19:12.160
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-11-24 13:19:12.185
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:19:16.686
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
			String situacao="";
			if(dinheiro1 > dinheiro2) {
				situacao = ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				 ranking(dinheiro2, nomes[1]);
			}
			System.out.println(situacao);
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-11-24 13:19:16.709
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-11-24 13:19:16.715
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:19:18.597
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
			String situacao="";
			if(dinheiro1 > dinheiro2) {
				situacao = ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				 ranking(dinheiro2, nomes[1]);
			}
			
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-11-24 13:19:18.616
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-11-24 13:19:18.665
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:19:20.237
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
			String situacao="";
			if(dinheiro1 > dinheiro2) {
				ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				 ranking(dinheiro2, nomes[1]);
			}
			
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-11-24 13:19:20.260
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-11-24 13:19:20.271
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:19:21.773
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
		
			if(dinheiro1 > dinheiro2) {
				ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				 ranking(dinheiro2, nomes[1]);
			}
			
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-11-24 13:19:21.791
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-11-24 13:19:21.797
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:19:22.581
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
		
			if(dinheiro1 > dinheiro2) {
				ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				 ranking(dinheiro2, nomes[1]);
			}
			
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-11-24 13:19:22.595
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-11-24 13:19:22.601
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:19:24.651
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
		
			if(dinheiro1 > dinheiro2) {
				ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				 ranking(dinheiro2, nomes[1]);
			}
			
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-11-24 13:19:24.673
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-11-24 13:19:24.689
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:19:26.904
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
		
			if(dinheiro1 > dinheiro2) {
				ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				 ranking(dinheiro2, nomes[1]);
			}
			
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-11-24 13:19:27.670
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-11-24 13:19:27.677
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:19:39.546
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
		
			if(dinheiro1 > dinheiro2) {
				ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				 ranking(dinheiro2, nomes[1]);
			}
			
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-11-24 13:19:39.574
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-11-24 13:19:39.580
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:19:41.350
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
		
			if(dinheiro1 > dinheiro2) {
				ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				 ranking(dinheiro2, nomes[1]);
			}
			
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-11-24 13:19:41.379
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-11-24 13:19:41.395
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:19:42.457
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
		
			if(dinheiro1 > dinheiro2) {
				ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				 ranking(dinheiro2, nomes[1]);
			}
			
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-11-24 13:19:42.482
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-11-24 13:19:42.488
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:19:48.871
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
		
			if(dinheiro1 > dinheiro2) {
				ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				 ranking(dinheiro2,nomes[1]);
			}
			
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-11-24 13:19:48.934
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-11-24 13:19:48.940
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:19:48.955
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
		
			if(dinheiro1 > dinheiro2) {
				ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				 ranking(dinheiro2,nomes[1]);
			}
			
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-11-24 13:19:48.978
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-11-24 13:19:49.000
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:19:50.053
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
		
			if(dinheiro1 > dinheiro2) {
				ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				 ranking(dinheiro2,nomes[1]);
			}
			
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-11-24 13:19:50.079
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-11-24 13:19:50.085
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:19:51.895
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
		
			if(dinheiro1 > dinheiro2) {
				ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				 ranking(dinheiro2,nomes[1]);
			}
			
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-11-24 13:19:51.926
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-11-24 13:19:51.932
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:19:51.944
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
		
			if(dinheiro1 > dinheiro2) {
				ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				 ranking(dinheiro2,nomes[1]);
			}
			
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jface.text 4 0 2023-11-24 13:19:51.961
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:19:54.913
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
		
			if(dinheiro1 > dinheiro2) {
				ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				 ranking(dinheiro2,nomes[1]);
			}
			
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-11-24 13:19:54.935
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-11-24 13:19:54.940
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-11-24 13:19:54.974
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package Corrida;

import java.util.Random;
import java.util.Scanner;

public class Jogo {
	static Random aleatorio = new Random();

	public static void main(String[] args) {
		Scanner ler = new Scanner(System.in);
		int dado1 = 0, dado2 = 0, posicao1 = 0, posicao2 = 0;

		// qtd jogadores
		int qtdJogadores = bemvindo();

		// nomes
		String[] nomes = pedirnomes(qtdJogadores);

		// regras
		regras();

		// Quem começa o jogo?
		do {
			String espaco = "";
			dado1 = dado();
			dado2 = dado();
			do {
				System.out.print("Jogue o dado " + nomes[0] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado1);
			System.out.println("-----------------------------------------------------");
			do {
				System.out.print("Jogue o dado " + nomes[1] + ":");
				espaco = ler.nextLine();
			} while (!espaco.equals(" "));
			System.out.println("Dado:" + dado2);
			System.out.println("=====================================================");
			if (dado1 == dado2) {
				System.err.println("===================");
				System.err.println("||dados iguais   ||\n||jogue novamente||");
				System.err.println("===================");
				System.out.println("=====================================================");
			}
		} while (dado1 == dado2);

		// com um jogador (nao feito ainda)
		if (qtdJogadores == 1) {

		}

		// com 2 jogadores
		else if (qtdJogadores == 2) {

			int carro = 0;

			if (dado1 > dado2) {
				System.out.printf("O jogador %s começa a corrida %n", nomes[0]);
				System.out.println("=====================================================");
				carro = 1;
			} else {
				System.out.printf("O jogador %s começa a corrida %n", nomes[1]);
				System.out.println("=====================================================");
				carro = 2;
			}

			System.out.println();
			System.err.println("============FOI DADA A LARGADA A CORRIDA=============");
			System.out.println();

			double dinheiro1 = 5000;
			double dinheiro2 = 5000;

			dado1 = 0;
			dado2 = 0;
			int valor1 = 0, valor2 = 0;
			int jg1 = 0, jg2 = 0;

			if (carro == 1) {

				// se o 1° jogador começa
				do {
					int num = 0;
					String espaco = "";

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {

					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}

					default -> {

						if (posicao1 == -1) {
							posicao1 = valor1;
						}

						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									System.out.println();
									dinheiro1 += 5000;
									jg1 += 2;

								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}

						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;
					}

					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}
					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			// se o segundo jogador começa
			else {
				do {
					int num = aleatorio.nextInt(11);
					String espaco = "";

					// jogador 2
					do {
						System.out.print("Jogue o dado " + nomes[1] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao2) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor2 = posicao2;
						posicao2 = -1;

					}
					default -> {

						if (posicao2 == -1) {
							posicao2 = valor2;
						}
						if (jg2 != 2) {
							dado2 = dado();
							posicao2 += dado2;
							if (posicao2 <= 20) {
								System.out.println("DADO:" + dado2);
								System.out.println(frases(posicao2, num));
								dinheiro2 += resultados(posicao2, num);
								System.out.println();
							} else {
								if (jg1 != 2) {
									System.out.println("DADO:" + dado2);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro2 += 5000;
									System.out.println();
									jg2 += 2;
								} else {
									System.out.println("DADO:" + dado2);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");
						}

					}
					}

					System.out.println();

					// jogador 1
					do {
						System.out.print("Jogue o dado " + nomes[0] + ":");
						espaco = ler.nextLine();
						num = aleatorio.nextInt(1, 11);

					} while (!espaco.equals(" "));

					switch (posicao1) {
					case 7, 11, 15 -> {
						System.out.println("Esta no mecanico");
						System.out.println();
						valor1 = posicao1;
						posicao1 = -1;
					}
					default -> {
						if (posicao1 == -1) {
							posicao1 = valor1;
						}
						if (jg1 != 2) {
							dado1 = dado();
							posicao1 += dado1;
							if (posicao1 <= 20) {
								System.out.println("DADO:" + dado1);
								System.out.println(frases(posicao1, num));
								dinheiro1 += resultados(posicao1, num);
								System.out.println();
							} else {
								if (jg2 != 2) {
									System.out.println("DADO:" + dado1);
									System.out.println(
											"LINHA DE CHEGADA:\nparabéns você ganhou o prêmio de R$ 5000 reais.");
									dinheiro1 += 5000;
									System.out.println();
									jg1 += 2;
								} else {
									System.out.println("DADO:" + dado1);
									System.out.println("LINHA DE CHEGADA:\nvoçe terminou a corrida");
								}
							}
						} else {
							System.out.println("Voçe terminou a corrida");
							System.out.println("Aguarde seu adversario terminar");

						}

					}
					}

					tabuleiro2(nomes, posicao1, posicao2, dinheiro1, dinheiro2);
					System.out.println();

				} while (posicao1 < 21 || posicao2 < 21);

			}

			ganhador2(dinheiro1, dinheiro2, nomes);
			System.out.println();
		
			if(dinheiro1 > dinheiro2) {
				ranking(dinheiro1,nomes[0]);
			}
			else(dinheiro2 > dinheiro1){
				 ranking(dinheiro2,nomes[1]);
			}
			
		}

	}

	public static void tabuleiro2(String[] nome, int poscarro1, int poscarro2, double valor1, double valor2) {

		String[][] tabuleiro = new String[1][22];

		tabuleiro[0][0] = "| LARGADA          |";
		tabuleiro[0][1] = "| Parada livre     |";
		tabuleiro[0][2] = "| Sorte ou Revés   |";
		tabuleiro[0][3] = "| Imposto          |";
		tabuleiro[0][4] = "| Sorte ou Revés   |";
		tabuleiro[0][5] = "| Pit Stop         |";
		tabuleiro[0][6] = "| Sorte ou Revés   |";
		tabuleiro[0][7] = "| Mecânica         |";
		tabuleiro[0][8] = "| Imposto          |";
		tabuleiro[0][9] = "| Sorte ou Revés   |";
		tabuleiro[0][10] = "| Parada livre     |";
		tabuleiro[0][11] = "| Mecânica         |";
		tabuleiro[0][12] = "| Pit Stop         |";
		tabuleiro[0][13] = "| Imposto          |";
		tabuleiro[0][14] = "| Sorte ou Revés   |";
		tabuleiro[0][15] = "| Mecânica         |";
		tabuleiro[0][16] = "| Sorte ou Revés   |";
		tabuleiro[0][17] = "| Imposto          |";
		tabuleiro[0][18] = "| Sorte ou Revés   |";
		tabuleiro[0][19] = "| Pit Stop         |";
		tabuleiro[0][20] = "| Sorte ou Revés   |";
		tabuleiro[0][21] = "| LINHA DE CHEGADA |";

		for (int i = 0; i < 22; i++) {
			if (i == poscarro1 && i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1, nome[1], valor2);
			} else if (i == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][i], nome[1], valor2);
			} else if (i == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][i], nome[0], valor1);
			} else if (-1 == poscarro1) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (-1 == poscarro1 && -1 == poscarro2) {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			} else if (i == 21 && poscarro1 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1);
			} else if (i == 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s #%s($%5.2f)%n", tabuleiro[0][21], nome[1], valor2);
			} else if (i == 21 && poscarro1 >= 21 && poscarro2 >= 21) {
				System.out.println("|------------------|");
				System.out.printf("%s @%s($%5.2f)|#%s($%5.2f)%n", tabuleiro[0][21], nome[0], valor1, nome[1], valor2);
			} else {
				System.out.println("|------------------|");
				System.out.printf("%s %n", tabuleiro[0][i]);
			}
		}

	}

	public static String frases(int dado, int num) {
		String situacao = "";

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			situacao = "Sorte ou Réves:\n" + frasesorteOUreves(num);
		}
		case 1, 10 -> {
			situacao = "Parada livre:\nFolga para respirar!Você não tem que fazer nada neste espaço.";
		}
		case 3, 8, 13, 17 -> {
			situacao = "Imposto:\nEssa não, o leão está com fome! Pague ao dono da pista o imposto no valor de R$ 300 reais.";
		}
		case 5, 12, 19 -> {
			situacao = "Pit Stop:\nSeu carro acaba de ser reabastecido com um valor de 500 reais .";
		}
		case 7, 11, 15 -> {
			situacao = "Mecânica:\nVocê entrou numa fria, pois enquanto estiver no mecânico não pode andar . Você ficará uma rodada sem jogar. ";
		}

		}

		return situacao;

	}

	public static int bemvindo() {
		Scanner ler = new Scanner(System.in);
		int qtd = 0;
		do {
			System.out.println("=====================================================");
			System.out.println("                  BEM-VINDO     ");
			System.out.println("             Corrida Do Milhão ");
			System.out.println("=====================================================");
			System.out.print("Informe a quantidade de jogadores: ");
			qtd = ler.nextInt();
			System.out.println("=====================================================");
		} while (qtd < 1 || qtd > 3);

		return qtd;

	}

	public static String[] pedirnomes(int qtd) {
		Scanner ler = new Scanner(System.in);

		String[] nomes = new String[qtd];

		for (int i = 0, cont = 1; i < nomes.length; cont++, i++) {

			switch (qtd) {
			case 1:
				System.out.printf("Informe o nome do jogador: ");
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;

			default:
				System.out.printf("Informe o nome do jogador %d: ", cont);
				nomes[i] = ler.nextLine();
				System.out.println("=====================================================");
				break;
			}

		}
		return nomes;

	}

	public static int dado() {
		Random aleatorio = new Random();
		int dado = aleatorio.nextInt(1, 4);
		return dado;
	}

	public static String frasesorteOUreves(int num) {

		String situacao = "";

		switch (num) {
		case 1:
			situacao = "Revés: voçe acaba de ser multado em R$ 1000 reais , placa do seu veiculo esta inelegível.";
			break;
		case 2:
			situacao = "Sorte: parabéns você acaba de ganhar R$ 2000 para trocar seus pneus.";
			break;
		case 3:
			situacao = "Revés: HM, que pena voçe acaba de ser multado no valor de R$ 400 por alta velocidade. ";
			break;
		case 4:
			situacao = "Sorte: Parabéns,você acabou de ganha R$ 1000 reais para pintar o seu carro.";
			break;
		case 5:
			situacao = "Revés: Deu Ruim!! voçe acaba de ser multado em R$ 300 andar sem sinto de segurança.";
			break;
		case 6:
			situacao = "Sorte: Parabéns,voçe acaba de ganhar R$ 2500 para turbinar o seu carro.";
			break;
		case 7:
			situacao = "Revés: HM...Pneu do seu carro esta careca ,voçe acaba de ser multado em R$500. ";
			break;
		case 8:
			situacao = "Sorte: Parabéns, Voçe acaba de ganhar R$1000 para trocar o escapamento.";
			break;
		case 9:
			situacao = "Revés:Hm...Se distraiu no celular tomou multa de R$600.";
			break;
		case 10:
			situacao = "Sorte:Parabéns voçe ganhou R$500 para trocar óleo.";
			break;
		}
		return situacao;
	}

	public static double sorteoureves(int num) {
		double valor = 0;

		switch (num) {
		case 1:
			valor = -1000;
			break;
		case 2:
			valor = 2000;
			break;
		case 3:
			valor = -400;
			break;
		case 4:
			valor = 1000;
			break;
		case 5:
			valor = -300;
			break;
		case 6:
			valor = 2500;
			break;
		case 7:
			valor = -500;
			break;
		case 8:
			valor = 1000;
			break;
		case 9:
			valor = -600;
			break;
		case 10:
			valor = 500;
			break;
		}
		return valor;
	}

	public static double resultados(int dado, int num) {
		double valor = 0;

		switch (dado) {
		case 2, 4, 6, 9, 14, 16, 18, 20 -> {
			valor = sorteoureves(num);
		}
		case 1, 10 -> {
			valor = 0;
			// parada livre
		}
		case 3, 8, 13, 17 -> {
			valor = -300;
		}
		case 5, 12, 19 -> {
			valor = 500;
		}
		case 7, 11, 15 -> {
			valor = 0;
		}
		}

		return valor;

	}

	public static void regras() {
		System.out.println("                 Vamos começar o jogo                ");
		System.out.println("=====================================================");
		System.out.println();
		System.err.println("||=================================================||");
		System.err.println("||               INSTRUÇÃO DO JOGO                 ||");
		System.err.println("||1°Cada jogador começa a corrida com R$5000,00    ||");
		System.err.println("||2°Aperte a tecla espaço e enter para jogar o dado||");
		System.err.println("||3°Num só espaço pode para mais de um carro       ||");
		System.err.println("||=================================================||");
		System.out.println();
		System.out.println("=====================================================");
		System.out.println("     O maior numero no dado começa a corrida:        ");
		System.out.println("=====================================================");

	}

	public static void ranking(double valor1, String nome1) {

		String[] nomes = new String[3];
		double[] valor = new double[3];
		nomes[0] = "pedro";
		nomes[1] = "bruno";
		nomes[2] = "kauan";
		valor[0] = 10000;
		valor[1] = 4000;
		valor[2] = 2000;

		if (valor1 > valor[0]) {
			valor[0] = valor1;
			nomes[0] = nome1;
		} else if (valor1 > valor[1]) {
			valor[1] = valor1;
			nomes[1] = nome1;
		} else if (valor1 > valor[2]) {
			valor[2] = valor1;
			nomes[2] = nome1;
		}

		System.out.println("===============================");
		System.out.println("          RANKING          ");
		int num = 1;

		for (int i = 0; i < nomes.length; i++) {
			System.out.println("-------------------------------");
			System.out.printf("%d° %10s : R$%7.2f %n", num, nomes[i], valor[i]);
			num++;
		}
		System.out.println("===============================");
	}

	public static void ganhador2(double dinheiro1, double dinheiro2, String[] nomes) {

		if (dinheiro1 == dinheiro2) {
			System.out.println("O ganhador foi os dois jogadores");
		} else if (dinheiro1 > dinheiro2) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[0]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro1);
			System.out.println("=====================================");
		} else if (dinheiro2 > dinheiro1) {
			System.out.println("=====================================");
			System.out.printf("Parabens %s voçe foi o ganhador %n", nomes[1]);
			System.out.printf("Com um valor de R$ %7.2f %n", dinheiro2);
			System.out.println("=====================================");
		}

	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)
